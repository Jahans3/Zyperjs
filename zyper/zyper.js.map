{"version":3,"sources":["zyper.js"],"names":["opts","textFields","Zyper","config","console","log","inputs","getTextFields","selector","document","querySelectorAll","length","warn","i","addEventListener","onType","e","window","event","stopPropagation","input","target","val","value","querySelector","innerHTML"],"mappings":";;;;;;AAAA;;;;AAIA;AACA;;AAEA,IAAMA,OAAO;AACX;AACAC,cAAY;AAFD,CAAb;;IAKMC,K;AACJ,iBAAYC,MAAZ,EAAoB;AAAA;;AAClBC,YAAQC,GAAR,CAAY,MAAZ;;AAEA,SAAKC,MAAL,GAAc,KAAKC,aAAL,CAAmBJ,OAAOF,UAA1B,CAAd;AACD;;AAED;;;;;;;;;kCAKcA,U,EAAY;AAAA;;AACxB,UAAIO,iBAAJ;;AAEA,UAAIP,eAAe,IAAnB,EAAyB;AACvBO,mBAAW,kCAAX;AACD,OAFD,MAGK,IAAI,CAACP,UAAL,EAAiB;AACpBO,mBAAW,eAAX;AACD,OAFI,MAGA;AACHA,mBAAWP,UAAX;AACD;;AAED,UAAMK,SAASG,SAASC,gBAAT,CAA0BF,QAA1B,CAAf;;AAEA,UAAI,CAACF,OAAOK,MAAZ,EAAoB;AAClBP,gBAAQQ,IAAR,CAAa,6CAAb;;AAEA,eAAO,KAAP;AACD;;AAED,WAAK,IAAIC,IAAI,CAAR,EAAWF,SAASL,OAAOK,MAAhC,EAAwCE,IAAIF,MAA5C,EAAoDE,GAApD,EAAyD;AACvDP,eAAOO,CAAP,EAAUC,gBAAV,CAA2B,SAA3B,EAAsC;AAAA,iBAAK,MAAKC,MAAL,CAAYC,CAAZ,CAAL;AAAA,SAAtC;AACAV,eAAOO,CAAP,EAAUC,gBAAV,CAA2B,OAA3B,EAAoC;AAAA,iBAAK,MAAKC,MAAL,CAAYC,CAAZ,CAAL;AAAA,SAApC;AACD;;AAEDZ,cAAQC,GAAR,CAAYC,MAAZ;;AAEA,aAAOA,MAAP;AACD;;;2BAEMU,C,EAAG;AACRA,UAAIA,KAAKC,OAAOC,KAAhB;AACAF,QAAEG,eAAF;;AAEA,UAAMC,QAAQJ,EAAEK,MAAhB;AACA,UAAMC,MAAMN,EAAEK,MAAF,CAASE,KAArB;;AAEA;AACA;AACA;AACA;AACA;AACAd,eAASe,aAAT,CAAuB,WAAvB,EAAoCC,SAApC,GAAgDH,GAAhD;AACD;;;;;;AAGH,IAAIpB,KAAJ,CAAUF,IAAV","file":"zyper.js","sourcesContent":["/**\n * Created by jahansj on 10/09/2016.\n */\n\n// Must take config object, first option is to target all text input or only a specific class \n// if no specific class provided uses default .zyper (or something)\n\nconst opts = {\n  // A selector to match the text fields | true - indicating all fields | empty string - indicating '[data-zyper=\"true\"]'\n  textFields: '.form-wrap [type=\"text\"]'\n};\n\nclass Zyper {\n  constructor(config) {\n    console.log('init');\n\n    this.inputs = this.getTextFields(config.textFields);\n  }\n\n  /**\n   * Get text inputs and bind events to\n   * @param textFields\n   * @returns {*}\n   */\n  getTextFields(textFields) {\n    let selector;\n\n    if (textFields === true) {\n      selector = '[type=\"text\"][data-zyper=\"true\"]';\n    }\n    else if (!textFields) {\n      selector = '[type=\"text\"]';\n    }\n    else {\n      selector = textFields;\n    }\n\n    const inputs = document.querySelectorAll(selector);\n\n    if (!inputs.length) {\n      console.warn('Zyper: Could not find matching text fields.');\n\n      return false;\n    }\n\n    for (let i = 0, length = inputs.length; i < length; i++) {\n      inputs[i].addEventListener('keydown', e => this.onType(e));\n      inputs[i].addEventListener('keyup', e => this.onType(e));\n    }\n\n    console.log(inputs);\n\n    return inputs;\n  }\n\n  onType(e) {\n    e = e || window.event;\n    e.stopPropagation();\n\n    const input = e.target;\n    const val = e.target.value;\n\n    // temp\n    // later we will build an element that appears above the active text box\n    // and fill in that text box with this text\n    // need to display a label (or any suitable element) directly above the active text input only\n    // need to display this label above the input but out of the workflow so doesn't interfere with host page\n    document.querySelector('.temp-box').innerHTML = val;\n  }\n}\n\nnew Zyper(opts);"],"sourceRoot":"/source/"}