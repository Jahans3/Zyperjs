{"version":3,"sources":["zyper.js"],"names":["opts","textFields","Zyper","config","buildLabel","getTextFields","selector","inputs","document","querySelectorAll","length","console","warn","i","addEventListener","activateLabel","e","onType","window","event","stopPropagation","ZyperText","innerHTML","target","value","wrapper","createElement","textField","customClass","backgroundColor","textColor","borderColor","className","style","width","height","border","borderRadius","display","position","color","appendChild","body","input","getStyle","fontSize","X","offsetLeft","Y","offsetTop","left","top","minWidth","element","property","noPx","getComputedStyle","getPropertyValue","split"],"mappings":"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","file":"zyper.js","sourcesContent":["/**\n * Created by jahansj on 10/09/2016.\n */\n\n// Must take config object, first option is to target all text input or only a specific class \n// if no specific class provided uses default .zyper (or something)\n\nconst opts = {\n  // A selector to match the text fields | true - indicating all fields | empty string - indicating '[data-zyper=\"true\"]'\n  textFields: true//'.form-wrap [type=\"text\"]'\n};\n\nclass Zyper {\n  constructor(config) {\n    this.buildLabel(config);\n    this.getTextFields(config.textFields);\n  }\n\n  /**\n   * Get text inputs and bind events\n   * @param textFields\n   * @returns {*}\n   */\n  getTextFields(textFields) {\n    let selector;\n\n    if (textFields === true) {\n      selector = '[type=\"text\"]';\n    }\n    else if (!textFields) {\n      selector = '[type=\"text\"][data-zyper=\"true\"]';\n    }\n    else {\n      selector = textFields;\n    }\n\n    const inputs = document.querySelectorAll(selector);\n\n    if (!inputs.length) {\n      console.warn('Zyper: Could not find matching text fields.');\n\n      return false;\n    }\n\n    for (let i = 0, length = inputs.length; i < length; i++) {\n      inputs[i].addEventListener('focus', e => this.activateLabel(e));\n      inputs[i].addEventListener('keyup', e => this.onType(e));\n      //inputs[i].addEventListener('blur', e => this.disableLabel());\n    }\n  }\n\n  /**\n   * Input handler\n   * @param e\n   */\n  onType(e) {\n    e = e || window.event;\n    e.stopPropagation();\n    \n    this.ZyperText.innerHTML = e.target.value;\n  }\n  \n  /**\n   * Build Zyper and assign to class variables\n   */\n  buildLabel(config) {\n    const wrapper = document.createElement('div');\n    const textField = document.createElement('span');\n    const customClass = config.customClass || '';\n    const backgroundColor = config.backgroundColor || '#000';\n    const textColor = config.textColor || '#fff';\n    const borderColor = config.borderColor || '#fff';\n\n    wrapper.className = `zyper ${customClass}`;\n    wrapper.style.width = '100px';\n    wrapper.style.height = '50px';\n    wrapper.style.backgroundColor = `${backgroundColor}`;\n    wrapper.style.border = `2px solid ${borderColor}`;\n    wrapper.style.borderRadius = '6px';\n    wrapper.style.display = 'none';\n    wrapper.style.position = 'absolute';\n    \n    textField.style.height = '100%';\n    textField.style.width = '100%';\n    textField.style.color = `${textColor}`;\n    \n    wrapper.appendChild(textField);\n    document.body.appendChild(wrapper);\n    \n    this.Zyper = wrapper;\n    this.ZyperText = textField;\n  }\n\n  /**\n   * Display Zyper and position above active input\n   * @param input\n   */\n  activateLabel(e) {\n    const input = e.target;\n    const height = this.getStyle(input, 'height', true);\n    const width = this.getStyle(input, 'width');\n    const fontSize = this.getStyle(input, 'font-size', true) * 2;\n    const X = input.offsetLeft;\n    const Y = input.offsetTop;\n    \n    this.ZyperText.innerHTML = input.value;\n    this.ZyperText.style.fontSize = `${fontSize}px`;\n    this.Zyper.style.left = `${X}px`;\n    this.Zyper.style.top = `${Y - (height * 3)}px`;\n    this.Zyper.style.height = `${height * 2}px`;\n    this.Zyper.style.minWidth = width;\n    this.Zyper.style.width = 'auto';\n    this.Zyper.style.display = 'block';\n  }\n\n  /**\n   * Hide Zyper\n   */\n  disableLabel() {\n    this.ZyperText.innerHTML = '';\n    this.Zyper.style.display = 'none';\n  }\n\n  /**\n   * Return computed style of an element\n   * @param element\n   * @param property\n   * @param noPx\n   * @returns {string}\n   */\n  getStyle(element, property, noPx) {\n    if (noPx) {\n      return window.getComputedStyle(element).getPropertyValue(property).split('p')[0];\n    }\n    return window.getComputedStyle(element).getPropertyValue(property);\n  }\n}\n\nnew Zyper(opts);"],"sourceRoot":"/source/"}